{"version":3,"sources":["webpack://PackDataStructuresAlogrithms/webpack/universalModuleDefinition","webpack://PackDataStructuresAlogrithms/webpack/bootstrap","webpack://PackDataStructuresAlogrithms/./src/js/data-structures/heap.js","webpack://PackDataStructuresAlogrithms/./src/js/data-structures/queue.js","webpack://PackDataStructuresAlogrithms/./src/js/data-structures/stack-array.js","webpack://PackDataStructuresAlogrithms/./src/js/data-structures/stack.js","webpack://PackDataStructuresAlogrithms/./src/js/index.js","webpack://PackDataStructuresAlogrithms/./src/js/others/base-converter.js","webpack://PackDataStructuresAlogrithms/./src/js/others/hot-potato.js","webpack://PackDataStructuresAlogrithms/./src/js/util.js"],"names":["MinHeap","constructor","compareFn","defaultCompare","heap","getLeftIndex","index","getRightIndex","getParentIndex","undefined","Math","floor","insert","value","push","siftUp","length","parent","Compare","BIGGER_THAN","swap","size","isEmpty","findMinimum","extract","shift","removedValue","siftDown","element","left","right","Queue","count","lowestCount","items","enqueue","dequeue","result","peek","clear","toString","objString","i","StackArray","pop","Stack","decimalToBinary","decNumber","base","remStack","number","rem","binaryString","hotPotato","elementsList","num","queue","elimitatedList","elimitated","winner","LESS_THAN","EQUALS","a","b","array","temp"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;QCVA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAEA;;;;;;;;AAOO,MAAMA,OAAN,CAAc;AACnBC,aAAW,CAACC,SAAS,GAAGC,oDAAb,EAA6B;AACtC,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKE,IAAL,GAAY,EAAZ,CAFsC,CAEtB;AACjB;;AACDC,cAAY,CAACC,KAAD,EAAQ;AAClB,WAAO,IAAIA,KAAJ,GAAY,CAAnB;AACD;;AACDC,eAAa,CAACD,KAAD,EAAQ;AACnB,WAAO,IAAIA,KAAJ,GAAY,CAAnB;AACD;;AACDE,gBAAc,CAACF,KAAD,EAAQ;AACpB,QAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,aAAOG,SAAP;AACD;;AACD,WAAOC,IAAI,CAACC,KAAL,CAAW,CAACL,KAAK,GAAG,CAAT,IAAc,CAAzB,CAAP;AACD;AACD;;;;;;;;AAMAM,QAAM,CAACC,KAAD,EAAQ;AACZ,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAKT,IAAL,CAAUU,IAAV,CAAeD,KAAf;AACA,WAAKE,MAAL,CAAY,KAAKX,IAAL,CAAUY,MAAV,GAAmB,CAA/B,EAFkB,CAEiB;;AACnC,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;AACD;;;;;;;;AAMAD,QAAM,CAACT,KAAD,EAAQ;AACZ,QAAIW,MAAM,GAAG,KAAKT,cAAL,CAAoBF,KAApB,CAAb,CADY,CAC6B;;AACzC,WAAOA,KAAK,GAAG,CAAR,IAAa,KAAKJ,SAAL,CAAe,KAAKE,IAAL,CAAUa,MAAV,CAAf,EAAkC,KAAKb,IAAL,CAAUE,KAAV,CAAlC,MAAwDY,6CAAO,CAACC,WAApF,EAAiG;AAC/FC,wDAAI,CAAC,KAAKhB,IAAN,EAAYa,MAAZ,EAAoBX,KAApB,CAAJ;AACAA,WAAK,GAAGW,MAAR,CAF+F,CAE/E;AACjB;AACF;;AACDI,MAAI,GAAG;AACL,WAAO,KAAKjB,IAAL,CAAUY,MAAjB;AACD;;AACDM,SAAO,GAAG;AACR,WAAO,KAAKD,IAAL,OAAgB,CAAvB;AACD;AACD;;;;;;;AAKAE,aAAW,GAAG;AACZ,WAAO,KAAKD,OAAL,KAAiBb,SAAjB,GAA6B,KAAKL,IAAL,CAAU,CAAV,CAApC;AACD;AACD;;;;;;;AAKAoB,SAAO,GAAG;AACR,QAAG,KAAKF,OAAL,EAAH,EAAmB;AACjB,aAAOb,SAAP;AACD;;AACD,QAAI,KAAKY,IAAL,OAAgB,CAApB,EAAuB;AACrB,aAAO,KAAKjB,IAAL,CAAUqB,KAAV,EAAP;AACD;;AACD,UAAMC,YAAY,GAAG,KAAKtB,IAAL,CAAUqB,KAAV,EAArB;AACA,SAAKE,QAAL,CAAc,CAAd;AACA,WAAOD,YAAP;AACD;AACD;;;;;;;AAKAC,UAAQ,CAACrB,KAAD,EAAQ;AACd,QAAIsB,OAAO,GAAGtB,KAAd,CADc,CACO;;AACrB,UAAMuB,IAAI,GAAG,KAAKxB,YAAL,CAAkBC,KAAlB,CAAb;AACA,UAAMwB,KAAK,GAAG,KAAKvB,aAAL,CAAmBD,KAAnB,CAAd;AACA,UAAMe,IAAI,GAAG,KAAKA,IAAL,EAAb,CAJc,CAKd;;AACA,QAAIQ,IAAI,GAAGR,IAAP,IAAe,KAAKnB,SAAL,CAAe,KAAKE,IAAL,CAAUwB,OAAV,CAAf,EAAmC,KAAKxB,IAAL,CAAUyB,IAAV,CAAnC,MAAwDX,6CAAO,CAACC,WAAnF,EAAgG;AAC9FS,aAAO,GAAGC,IAAV;AACD,KARa,CASd;;;AACA,QAAIC,KAAK,GAAGT,IAAR,IAAgB,KAAKnB,SAAL,CAAe,KAAKE,IAAL,CAAUwB,OAAV,CAAf,EAAmC,KAAKxB,IAAL,CAAU0B,KAAV,MAAqBZ,6CAAO,CAACC,WAAhE,CAApB,EAAkG;AAChGS,aAAO,GAAGE,KAAV;AACD;;AACD,QAAIxB,KAAK,KAAKsB,OAAd,EAAuB;AACrBR,wDAAI,CAAC,KAAKhB,IAAN,EAAYE,KAAZ,EAAmBsB,OAAnB,CAAJ;AACA,WAAKD,QAAL,CAAcC,OAAd,EAFqB,CAEG;AACzB;AACF;;AAhGkB,C;;;;;;;;;;;;ACVrB;AAAA;AAAe,MAAMG,KAAN,CAAY;AACzB9B,aAAW,GAAG;AACZ,SAAK+B,KAAL,GAAa,CAAb,CADY,CACI;;AAChB,SAAKC,WAAL,GAAmB,CAAnB,CAFY,CAEU;;AACtB,SAAKC,KAAL,GAAa,EAAb,CAHY,CAGK;AAClB;AACD;;;;;;;AAKAC,SAAO,CAACP,OAAD,EAAU;AACf,SAAKM,KAAL,CAAW,KAAKF,KAAhB,IAAyBJ,OAAzB;AACA,SAAKI,KAAL;AACD;AACD;;;;;AAGAI,SAAO,GAAG;AACR,QAAI,KAAKd,OAAL,EAAJ,EAAoB;AAClB,aAAOb,SAAP;AACD;;AACD,UAAM4B,MAAM,GAAG,KAAKH,KAAL,CAAW,KAAKD,WAAhB,CAAf,CAJQ,CAIqC;;AAC7C,WAAO,KAAKC,KAAL,CAAW,KAAKD,WAAhB,CAAP;AACA,SAAKA,WAAL,GANQ,CAMY;;AACpB,WAAOI,MAAP;AACD;AACD;;;;;AAGAC,MAAI,GAAG;AACL,QAAI,KAAKhB,OAAL,EAAJ,EAAoB;AAClB,aAAOb,SAAP;AACD;;AACD,WAAO,KAAKyB,KAAL,CAAW,KAAKD,WAAhB,CAAP;AACD;AACD;;;;;AAGAX,SAAO,GAAG;AACR,WAAO,KAAKU,KAAL,GAAa,KAAKC,WAAlB,KAAkC,CAAzC,CADQ,CACoC;AAC7C;AACD;;;;;AAGAZ,MAAI,GAAG;AACL,WAAO,KAAKW,KAAL,GAAa,KAAKC,WAAzB;AACD;AACD;;;;;;;AAKAM,OAAK,GAAG;AACN,SAAKL,KAAL,GAAa,EAAb;AACA,SAAKF,KAAL,GAAa,CAAb;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACD;;AACDO,UAAQ,GAAG;AACT,QAAI,KAAKlB,OAAL,EAAJ,EAAoB;AAClB,aAAO,EAAP;AACD;;AACD,QAAImB,SAAS,GAAI,GAAE,KAAKP,KAAL,CAAW,KAAKD,WAAhB,CAA6B,EAAhD;;AACA,SAAK,IAAIS,CAAC,GAAG,KAAKT,WAAL,GAAmB,CAAhC,EAAmCS,CAAC,GAAG,KAAKV,KAA5C,EAAmDU,CAAC,EAApD,EAAwD;AACtDD,eAAS,GAAI,GAAEA,SAAU,IAAG,KAAKP,KAAL,CAAWQ,CAAX,CAAc,EAA1C;AACD;;AACD,WAAOD,SAAP;AACD;;AAnEwB,C;;;;;;;;;;;;ACA3B;AAAA;AAAA;AACe,MAAME,UAAN,CAAiB;AAC9B1C,aAAW,GAAG;AACZ,SAAKiC,KAAL,GAAa,EAAb;AACD;AACD;;;;;;;AAKApB,MAAI,CAACc,OAAD,EAAU;AACZ,SAAKM,KAAL,CAAWpB,IAAX,CAAgBc,OAAhB;AACD;AACD;;;;;;;AAKAgB,KAAG,GAAG;AACJ,WAAO,KAAKV,KAAL,CAAWU,GAAX,EAAP;AACD;AACD;;;;;;;AAKAN,MAAI,GAAG;AACL,WAAO,KAAKJ,KAAL,CAAW,KAAKA,KAAL,CAAWlB,MAAX,GAAoB,CAA/B,CAAP;AACD;AACD;;;;;;;AAKAM,SAAO,GAAG;AACR,WAAO,KAAKY,KAAL,CAAWlB,MAAX,KAAsB,CAA7B;AACD;AACD;;;;;;;AAKAK,MAAI,GAAG;AACL,WAAO,KAAKa,KAAL,CAAWlB,MAAlB;AACD;AACD;;;;;;AAIAuB,OAAK,GAAG;AACN,SAAKL,KAAL,GAAa,EAAb;AACD;;AAlD6B,C;;;;;;;;;;;;ACDhC;AAAA;AAAA;;;;;AAKe,MAAMW,KAAN,CAAY;AACzB5C,aAAW,GAAG;AACZ,SAAK+B,KAAL,GAAa,CAAb,CADY,CACI;;AAChB,SAAKE,KAAL,GAAa,EAAb;AACD;AACD;;;;;;;AAKApB,MAAI,CAACc,OAAD,EAAU;AACZ,SAAKM,KAAL,CAAW,KAAKF,KAAhB,IAAyBJ,OAAzB;AACA,SAAKI,KAAL;AACD;AACD;;;;;;;AAKAY,KAAG,GAAG;AACJ,QAAI,KAAKtB,OAAL,EAAJ,EAAoB;AAAE;AACpB,aAAOb,SAAP,CADkB,CACA;AACnB;;AACD,SAAKuB,KAAL,GAJI,CAIU;;AACd,UAAMK,MAAM,GAAG,KAAKH,KAAL,CAAW,KAAKF,KAAhB,CAAf,CALI,CAKmC;;AACvC,WAAO,KAAKE,KAAL,CAAW,KAAKF,KAAhB,CAAP,CANI,CAM0B;;AAC9B,WAAOK,MAAP;AACD;AACD;;;;;;;AAKAhB,MAAI,GAAG;AACL,WAAO,KAAKW,KAAZ;AACD;AACD;;;;;;;AAKAV,SAAO,GAAG;AACR,WAAO,KAAKU,KAAL,KAAe,CAAtB;AACD;AACA;;;;;;;AAKDM,MAAI,GAAG;AACL,QAAI,KAAKhB,OAAL,EAAJ,EAAoB;AAClB,aAAOb,SAAP;AACD;;AACD,WAAO,KAAKyB,KAAL,CAAW,KAAKF,KAAL,GAAY,CAAvB,CAAP;AACD;AACD;;;;;;AAIAO,OAAK,GAAG;AACN,SAAKL,KAAL,GAAa,EAAb;AACA,SAAKF,KAAL,GAAa,CAAb,CAFM,CAGN;AACA;AACD;AACD;;;;;;;AAKAQ,UAAQ,GAAG;AACT,QAAI,KAAKlB,OAAL,EAAJ,EAAoB;AAClB,aAAO,EAAP,CADkB,CACP;AACZ;;AACD,QAAImB,SAAS,GAAI,GAAE,KAAKP,KAAL,CAAW,CAAX,CAAc,EAAjC,CAJS,CAI2B;;AACpC,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,KAAzB,EAAgCU,CAAC,EAAjC,EAAqC;AAAE;AACrCD,eAAS,GAAI,GAAEA,SAAU,IAAG,KAAKP,KAAL,CAAWQ,CAAX,CAAc,EAA1C;AACD;;AACD,WAAOD,SAAP;AACD;;AA/EwB,C;;;;;;;;;;;;ACL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AACA;;;;;;AAKO,SAASK,eAAT,CAAyBC,SAAzB,EAAoCC,IAApC,EAA0C;AAC/C,QAAMC,QAAQ,GAAG,IAAIJ,8DAAJ,EAAjB;AACA,MAAIK,MAAM,GAAGH,SAAb,CAF+C,CAEvB;;AACxB,MAAII,GAAJ,CAH+C,CAGtC;;AACT,MAAIC,YAAY,GAAG,EAAnB;;AAEA,SAAOF,MAAM,GAAG,CAAhB,EAAmB;AACjB;AACAC,OAAG,GAAGzC,IAAI,CAACC,KAAL,CAAWuC,MAAM,GAAGF,IAApB,CAAN;AACAC,YAAQ,CAACnC,IAAT,CAAcqC,GAAd,EAHiB,CAGG;;AACpBD,UAAM,GAAGxC,IAAI,CAACC,KAAL,CAAWuC,MAAM,GAAGF,IAApB,CAAT;AACD;;AAED,SAAM,CAACC,QAAQ,CAAC3B,OAAT,EAAP,EAA2B;AACzB8B,gBAAY,IAAIH,QAAQ,CAACL,GAAT,GAAeJ,QAAf,EAAhB;AACD;;AACD,SAAOY,YAAP;AACD,C;;;;;;;;;;;;ACvBD;AAAA;AAAA;AAAA;AACA;;;;;;;;;AAQe,SAASC,SAAT,CAAmBC,YAAnB,EAAiCC,GAAjC,EAAsC;AACnD,QAAMC,KAAK,GAAG,IAAIzB,8DAAJ,EAAd;AACA,QAAM0B,cAAc,GAAG,EAAvB;;AAEA,OAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,YAAY,CAACtC,MAAjC,EAAyC0B,CAAC,EAA1C,EAA8C;AAC5Cc,SAAK,CAACrB,OAAN,CAAcmB,YAAY,CAACZ,CAAD,CAA1B;AACD;;AAED,SAAOc,KAAK,CAACnC,IAAN,KAAe,CAAtB,EAAyB;AACvB;AACA;AACA,SAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,GAApB,EAAyBb,CAAC,EAA1B,EAA8B;AAC5Bc,WAAK,CAACrB,OAAN,CAAcqB,KAAK,CAACpB,OAAN,EAAd;AACD;;AACDqB,kBAAc,CAAC3C,IAAf,CAAoB0C,KAAK,CAACpB,OAAN,EAApB;AACD;;AACD,SAAO;AACLsB,cAAU,EAAED,cADP;AAELE,UAAM,EAAEH,KAAK,CAACpB,OAAN;AAFH,GAAP;AAID,C;;;;;;;;;;;;AC7BD;AAAA;AAAA;AAAA;AAAO,MAAMlB,OAAO,GAAG;AACrB0C,WAAS,EAAE,CAAC,CADS;AAErBzC,aAAW,EAAE,CAFQ;AAGrB0C,QAAM,EAAE;AAHa,CAAhB;AAMA,SAAS1D,cAAT,CAAwB2D,CAAxB,EAA2BC,CAA3B,EAA8B;AACnC,MAAKD,CAAC,KAAKC,CAAX,EAAc;AACZ,WAAO7C,OAAO,CAAC2C,MAAf;AACD;;AACD,SAAOC,CAAC,GAAGC,CAAJ,GAAQ7C,OAAO,CAAC0C,SAAhB,GAA4B1C,OAAO,CAACC,WAA3C;AACD;AACD;;;;;;;;AAOO,SAASC,IAAT,CAAc4C,KAAd,EAAqBF,CAArB,EAAwBC,CAAxB,EAA2B;AAChC,QAAME,IAAI,GAAGD,KAAK,CAACF,CAAD,CAAlB;AACAE,OAAK,CAACF,CAAD,CAAL,GAAWE,KAAK,CAACD,CAAD,CAAhB;AACAC,OAAK,CAACD,CAAD,CAAL,GAAWE,IAAX;AACD,C","file":"PackDataStructuresAlogrithms.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PackDataStructuresAlogrithms\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PackDataStructuresAlogrithms\"] = factory();\n\telse\n\t\troot[\"PackDataStructuresAlogrithms\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/js/index.js\");\n","\nimport { defaultCompare, Compare, swap } from '../util'\n\n/**\n * 最小堆类\n * 完全二叉树，根节点最小的堆叫做最小堆\n * 在二叉堆中，每个子节点都要大于等于父节点\n * @export\n * @class MinHeap\n */\nexport class MinHeap {\n  constructor(compareFn = defaultCompare) {\n    this.compareFn = compareFn;\n    this.heap = []; // 使用数组来存储数据，通过索引值检索父节点、左侧和右侧子节点的值。\n  }\n  getLeftIndex(index) {\n    return 2 * index + 1;\n  }\n  getRightIndex(index) {\n    return 2 * index + 2;\n  }\n  getParentIndex(index) {\n    if (index === 0) {\n      return undefined;\n    }\n    return Math.floor((index - 1) / 2)\n  }\n  /**\n   * 向堆中插入值\n   * 指将值插入堆的底部叶节点（数组的最后一个位置）\n   * @param {*} value\n   * @memberof MinHeap\n   */\n  insert(value) {\n    if (value !== null) {\n      this.heap.push(value);\n      this.siftUp(this.heap.length - 1); // 将这个值和它的父节点进行交换，直到父节点小于这个插入的值。\n      return true;\n    }\n    return false;\n  }\n  /**\n   * 上移操作，维护堆的结构\n   * 将这个值和它的父节点进行交换，直到父节点小于这个插入的值。\n   * @param {*} index\n   * @memberof MinHeap\n   */\n  siftUp(index) {\n    let parent = this.getParentIndex(index); // 获得父节点的索引\n    while( index > 0 && this.compareFn(this.heap[parent], this.heap[index]) === Compare.BIGGER_THAN) {\n      swap(this.heap, parent, index);\n      index = parent; // 往上替换\n    }\n  }\n  size() {\n    return this.heap.length;\n  }\n  isEmpty() {\n    return this.size() === 0;\n  }\n  /**\n   * 从堆中找到最小值或最大值\n   * 在最小堆中，最小值总是位于数组的第一个位置（堆的根节点）\n   * @memberof MinHeap\n   */\n  findMinimum() {\n    return this.isEmpty() ? undefined : this.heap[0];\n  }\n  /**\n   * 移除最小值表示移除数组中的第一个元素（堆的根节点）。\n   * 在移除后，我们将堆的最后一个元素移动至根部并执行 siftDown 函数，表示我们将交换元素直到堆的结构正常。\n   * @memberof MinHeap\n   */\n  extract() {\n    if(this.isEmpty()) {\n      return undefined;\n    }\n    if (this.size() === 1) {\n      return this.heap.shift();\n    }\n    const removedValue = this.heap.shift();\n    this.siftDown(0);\n    return removedValue;\n  }\n  /**\n   * 下移操作，维护堆的结构\n   * @param {*} index 移除元素的位置\n   * @memberof MinHeap\n   */\n  siftDown(index) {\n    let element = index; // 将 index 复制到 element 变量中\n    const left = this.getLeftIndex(index);\n    const right = this.getRightIndex(index);\n    const size = this.size();\n    // 如果元素比左侧节点要小，且 index 合法。\n    if (left < size && this.compareFn(this.heap[element], this.heap[left]) === Compare.BIGGER_THAN) {\n      element = left;\n    }\n    // 如果元素比右侧节点要小，且 index 合法。\n    if (right < size && this.compareFn(this.heap[element], this.heap[right] === Compare.BIGGER_THAN)) {\n      element = right;\n    }\n    if (index !== element) {\n      swap(this.heap, index, element);\n      this.siftDown(element); // 向下移动\n    }\n  }\n}","export default class Queue {\n  constructor() {\n    this.count = 0; // 控制队列的大小\n    this.lowestCount = 0; // 用于追踪第一元素，便于从队列前端移除元素\n    this.items = {}; // 用对象存储我们的元素\n  }\n  /**\n   * 向队列添加元素\n   * 该方法负责向队列添加新元素，新的项只能添加到队列末尾。\n   * @param {*} element \n   */\n  enqueue(element) {\n    this.items[this.count] = element;\n    this.count++;\n  }\n  /**\n   * 从队列移除元素\n   */\n  dequeue() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    const result = this.items[this.lowestCount]; // 暂存队列头部的值，以便改元素被移除后将它返回\n    delete this.items[this.lowestCount];\n    this.lowestCount++; // 属性+ 1\n    return result;\n  }\n  /**\n   * 查看队列头元素\n   */\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[this.lowestCount];\n  }\n  /**\n   * 检查队列是否为空并获取它的长度\n   */\n  isEmpty() {\n    return this.count - this.lowestCount === 0; // 要计算队列中有多少元素，我们只需要计算 count 和 lowestCount 之间的差值\n  }\n  /**\n   * 计算队列中有多少元素\n   */\n  size() {\n    return this.count - this.lowestCount;\n  }\n  /**\n   * 清空队列\n   * 要清空队列，我们可以调用 dequeue 方法直到它返回 undefined，也可以简单地将队列中的舒心值重设为和构造函数的一样。\n   * @memberof Queue\n   */\n  clear() {\n    this.items = {};\n    this.count = 0;\n    this.lowestCount = 0;\n  }\n  toString() {\n    if (this.isEmpty()) {\n      return '';\n    }\n    let objString = `${this.items[this.lowestCount]}`;\n    for (let i = this.lowestCount + 1; i < this.count; i++) {\n      objString = `${objString},${this.items[i]}`\n    }\n    return objString;\n  }\n}","// LIFO：只能用 push, pop 方法添加和删除栈中元素，满足 LIFO 原则\nexport default class StackArray {\n  constructor() {\n    this.items = [];\n  }\n  /**\n   * @description 向栈添加元素，该方法只添加元素到栈顶，也就是栈的末尾。\n   * @param {*} element \n   * @memberof Stack\n   */\n  push(element) {\n    this.items.push(element);\n  }\n  /**\n   * @description 从栈移除元素\n   * @returns 移出最后添加进去的元素\n   * @memberof Stack\n   */\n  pop() {\n    return this.items.pop();\n  }\n  /**\n   * @description 查看栈顶元素\n   * @returns 返回栈顶的元素\n   * @memberof Stack\n   */\n  peek() {\n    return this.items[this.items.length - 1];\n  }\n  /**\n   * @description 检查栈是否为空\n   * @returns\n   * @memberof Stack\n   */\n  isEmpty() {\n    return this.items.length === 0;\n  }\n  /**\n   * @description 返回栈的长度\n   * @returns\n   * @memberof Stack\n   */\n  size() {\n    return this.items.length;\n  }\n  /**\n   * @description 清空栈元素\n   * @memberof Stack\n   */\n  clear() {\n    this.items = [];\n  }\n}\n","/**\n * @description 创建一个基于 JavaScript 对象的 Stack 类\n * 使用 JavaScript 对象来存储所有的栈元素，保证它们的顺序并且遵循 LIFO 原则。\n * @class Stack\n */\nexport default class Stack {\n  constructor() {\n    this.count = 0; // 记录栈的大小，以及帮助我们从数据结构中添加和删除元素。保证顺序\n    this.items = {}\n  }\n  /**\n   * @description 向栈中插入元素\n   * @param {*} element\n   * @memberof Stack\n   */\n  push(element) {\n    this.items[this.count] = element;\n    this.count++;\n  }\n  /**\n   * @description 从栈中弹出元素\n   * @returns 移出最后添加进去的元素\n   * @memberof Stack\n   */\n  pop() {\n    if (this.isEmpty()) { // {1}检验栈是否空\n      return undefined; // 如果为空，则返回 undefined\n    } \n    this.count--; // 如果栈不为空的话，我们会讲 count 属性减1\n    const result = this.items[this.count]; // 保存栈顶的\n    delete this.items[this.count] // 删除该属性\n    return result;\n  }\n  /**\n   * @description 返回栈的长度\n   * @returns\n   * @memberof Stack\n   */\n  size() {\n    return this.count;\n  }\n  /**\n   * @description 检查栈是否为空\n   * @returns\n   * @memberof Stack\n   */\n  isEmpty() {\n    return this.count === 0;\n  }\n   /**\n   * @description 查看栈顶元素\n   * @returns 返回栈顶的元素\n   * @memberof Stack\n   */\n  peek() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    return this.items[this.count -1];\n  }\n  /**\n   * @description 清空栈元素\n   * @memberof Stack\n   */\n  clear() {\n    this.items = {};\n    this.count = 0;\n    // 或者 LIFO 原则\n    // while (!this.isEmpty()) { this.pop(); }\n  }\n  /**\n   * @description 打印栈的内容\n   * @returns\n   * @memberof Stack\n   */\n  toString() {\n    if (this.isEmpty()) {\n      return ''; // 如果栈是空的，我们只需返回一个空字符串\n    }\n    let objString = `${this.items[0]}`; // 如果不是空的，就用它底部的第一个元素作为字符串的初始值\n    for (let i = 1; i < this.count; i++) { // 迭代整个栈的键\n      objString = `${objString},${this.items[i]}`\n    }\n    return objString;\n  }\n}","// stack\nimport StackArray from './data-structures/stack-array';\nimport Stack from './data-structures/stack';\nimport Queue from './data-structures/queue';\nimport hotPotato from './others/hot-potato';\nimport { MinHeap }  from \"./data-structures/heap\"\nimport { decimalToBinary } from './others/base-converter';\n\nexport { StackArray, Stack, decimalToBinary, Queue, hotPotato, MinHeap };\n","import Stack from \"../data-structures/stack\"\n/**\n * 把十进制转换成基数为 2～36 的任意进制。\n * @param {*} decNumber 十进制\n * @param {*} base 基数\n */\nexport function decimalToBinary(decNumber, base) {\n  const remStack = new Stack();\n  let number = decNumber; // 十进制数字\n  let rem; // 余数\n  let binaryString = '';\n\n  while (number > 0) {\n    // 当结果不为0，获得一个余数\n    rem = Math.floor(number % base); \n    remStack.push(rem); // 入栈\n    number = Math.floor(number / base);\n  }\n\n  while(!remStack.isEmpty()) {\n    binaryString += remStack.pop().toString();\n  }\n  return binaryString;\n}","import Queue from \"../data-structures/queue\"\n/**\n * 模拟击鼓传花\n * 循环队列。在这个游戏中，孩子们围成一个圆圈，把花尽快传递给旁边的人。某一时刻传花停止，这个时候花在谁手上，谁就退出圆圈，结束游戏。\n * 重复这个过程，直到只剩一个孩子（胜者）。\n * @export\n * @param {*} elementsList 要入列的元素\n * @param {*} num // 达到给定的传递次数。 // 可以随机输入\n */\nexport default function hotPotato(elementsList, num) {\n  const queue = new Queue();\n  const elimitatedList = [];\n\n  for (let i = 0; i < elementsList.length; i++) {\n    queue.enqueue(elementsList[i]);\n  }\n\n  while (queue.size() > 1) {\n    // 循环队列，给定一个数字，然后迭代队列。从队列开头移除一项，再将其添加到队列末尾，模拟击鼓传花。\n    // 一旦达到给定的传递次数，拿着花的那个人就被淘汰了。（从队列中移除）\n    for (let i = 0; i < num; i++) {\n      queue.enqueue(queue.dequeue());\n    }\n    elimitatedList.push(queue.dequeue());\n  }\n  return {\n    elimitated: elimitatedList,\n    winner: queue.dequeue()\n  }\n}","export const Compare = {\n  LESS_THAN: -1,\n  BIGGER_THAN: 1,\n  EQUALS: 0\n}\n\nexport function defaultCompare(a, b) {\n  if ( a === b) {\n    return Compare.EQUALS;\n  }\n  return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN;\n}\n/**\n * 交换函数\n * @export\n * @param {*} array\n * @param {*} a\n * @param {*} b\n */\nexport function swap(array, a, b) {\n  const temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n}"],"sourceRoot":""}