(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("PackDataStructuresAlogrithms", [], factory);
	else if(typeof exports === 'object')
		exports["PackDataStructuresAlogrithms"] = factory();
	else
		root["PackDataStructuresAlogrithms"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/data-structures/heap.js":
/*!****************************************!*\
  !*** ./src/js/data-structures/heap.js ***!
  \****************************************/
/*! exports provided: MinHeap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinHeap", function() { return MinHeap; });
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ "./src/js/util.js");

/**
 * 最小堆类
 * 完全二叉树，根节点最小的堆叫做最小堆
 * 在二叉堆中，每个子节点都要大于等于父节点
 * @export
 * @class MinHeap
 */

class MinHeap {
  constructor(compareFn = _util__WEBPACK_IMPORTED_MODULE_0__["defaultCompare"]) {
    this.compareFn = compareFn;
    this.heap = []; // 使用数组来存储数据，通过索引值检索父节点、左侧和右侧子节点的值。
  }

  getLeftIndex(index) {
    return 2 * index + 1;
  }

  getRightIndex(index) {
    return 2 * index + 2;
  }

  getParentIndex(index) {
    if (index === 0) {
      return undefined;
    }

    return Math.floor((index - 1) / 2);
  }
  /**
   * 向堆中插入值
   * 指将值插入堆的底部叶节点（数组的最后一个位置）
   * @param {*} value
   * @memberof MinHeap
   */


  insert(value) {
    if (value !== null) {
      this.heap.push(value);
      this.siftUp(this.heap.length - 1); // 将这个值和它的父节点进行交换，直到父节点小于这个插入的值。

      return true;
    }

    return false;
  }
  /**
   * 上移操作，维护堆的结构
   * 将这个值和它的父节点进行交换，直到父节点小于这个插入的值。
   * @param {*} index
   * @memberof MinHeap
   */


  siftUp(index) {
    let parent = this.getParentIndex(index); // 获得父节点的索引

    while (index > 0 && this.compareFn(this.heap[parent], this.heap[index]) === _util__WEBPACK_IMPORTED_MODULE_0__["Compare"].BIGGER_THAN) {
      Object(_util__WEBPACK_IMPORTED_MODULE_0__["swap"])(this.heap, parent, index);
      index = parent; // 往上替换
    }
  }

  size() {
    return this.heap.length;
  }

  isEmpty() {
    return this.size() === 0;
  }
  /**
   * 从堆中找到最小值或最大值
   * 在最小堆中，最小值总是位于数组的第一个位置（堆的根节点）
   * @memberof MinHeap
   */


  findMinimum() {
    return this.isEmpty() ? undefined : this.heap[0];
  }
  /**
   * 移除最小值表示移除数组中的第一个元素（堆的根节点）。
   * 在移除后，我们将堆的最后一个元素移动至根部并执行 siftDown 函数，表示我们将交换元素直到堆的结构正常。
   * @memberof MinHeap
   */


  extract() {
    if (this.isEmpty()) {
      return undefined;
    }

    if (this.size() === 1) {
      return this.heap.shift();
    }

    const removedValue = this.heap.shift();
    this.siftDown(0);
    return removedValue;
  }
  /**
   * 下移操作，维护堆的结构
   * @param {*} index 移除元素的位置
   * @memberof MinHeap
   */


  siftDown(index) {
    let element = index; // 将 index 复制到 element 变量中

    const left = this.getLeftIndex(index);
    const right = this.getRightIndex(index);
    const size = this.size(); // 如果元素比左侧节点要小，且 index 合法。

    if (left < size && this.compareFn(this.heap[element], this.heap[left]) === _util__WEBPACK_IMPORTED_MODULE_0__["Compare"].BIGGER_THAN) {
      element = left;
    } // 如果元素比右侧节点要小，且 index 合法。


    if (right < size && this.compareFn(this.heap[element], this.heap[right] === _util__WEBPACK_IMPORTED_MODULE_0__["Compare"].BIGGER_THAN)) {
      element = right;
    }

    if (index !== element) {
      Object(_util__WEBPACK_IMPORTED_MODULE_0__["swap"])(this.heap, index, element);
      this.siftDown(element); // 向下移动
    }
  }

}

/***/ }),

/***/ "./src/js/data-structures/queue.js":
/*!*****************************************!*\
  !*** ./src/js/data-structures/queue.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Queue; });
class Queue {
  constructor() {
    this.count = 0; // 控制队列的大小

    this.lowestCount = 0; // 用于追踪第一元素，便于从队列前端移除元素

    this.items = {}; // 用对象存储我们的元素
  }
  /**
   * 向队列添加元素
   * 该方法负责向队列添加新元素，新的项只能添加到队列末尾。
   * @param {*} element 
   */


  enqueue(element) {
    this.items[this.count] = element;
    this.count++;
  }
  /**
   * 从队列移除元素
   */


  dequeue() {
    if (this.isEmpty()) {
      return undefined;
    }

    const result = this.items[this.lowestCount]; // 暂存队列头部的值，以便改元素被移除后将它返回

    delete this.items[this.lowestCount];
    this.lowestCount++; // 属性+ 1

    return result;
  }
  /**
   * 查看队列头元素
   */


  peek() {
    if (this.isEmpty()) {
      return undefined;
    }

    return this.items[this.lowestCount];
  }
  /**
   * 检查队列是否为空并获取它的长度
   */


  isEmpty() {
    return this.count - this.lowestCount === 0; // 要计算队列中有多少元素，我们只需要计算 count 和 lowestCount 之间的差值
  }
  /**
   * 计算队列中有多少元素
   */


  size() {
    return this.count - this.lowestCount;
  }
  /**
   * 清空队列
   * 要清空队列，我们可以调用 dequeue 方法直到它返回 undefined，也可以简单地将队列中的舒心值重设为和构造函数的一样。
   * @memberof Queue
   */


  clear() {
    this.items = {};
    this.count = 0;
    this.lowestCount = 0;
  }

  toString() {
    if (this.isEmpty()) {
      return '';
    }

    let objString = `${this.items[this.lowestCount]}`;

    for (let i = this.lowestCount + 1; i < this.count; i++) {
      objString = `${objString},${this.items[i]}`;
    }

    return objString;
  }

}

/***/ }),

/***/ "./src/js/data-structures/stack-array.js":
/*!***********************************************!*\
  !*** ./src/js/data-structures/stack-array.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return StackArray; });
// LIFO：只能用 push, pop 方法添加和删除栈中元素，满足 LIFO 原则
class StackArray {
  constructor() {
    this.items = [];
  }
  /**
   * @description 向栈添加元素，该方法只添加元素到栈顶，也就是栈的末尾。
   * @param {*} element 
   * @memberof Stack
   */


  push(element) {
    this.items.push(element);
  }
  /**
   * @description 从栈移除元素
   * @returns 移出最后添加进去的元素
   * @memberof Stack
   */


  pop() {
    return this.items.pop();
  }
  /**
   * @description 查看栈顶元素
   * @returns 返回栈顶的元素
   * @memberof Stack
   */


  peek() {
    return this.items[this.items.length - 1];
  }
  /**
   * @description 检查栈是否为空
   * @returns
   * @memberof Stack
   */


  isEmpty() {
    return this.items.length === 0;
  }
  /**
   * @description 返回栈的长度
   * @returns
   * @memberof Stack
   */


  size() {
    return this.items.length;
  }
  /**
   * @description 清空栈元素
   * @memberof Stack
   */


  clear() {
    this.items = [];
  }

}

/***/ }),

/***/ "./src/js/data-structures/stack.js":
/*!*****************************************!*\
  !*** ./src/js/data-structures/stack.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Stack; });
/**
 * @description 创建一个基于 JavaScript 对象的 Stack 类
 * 使用 JavaScript 对象来存储所有的栈元素，保证它们的顺序并且遵循 LIFO 原则。
 * @class Stack
 */
class Stack {
  constructor() {
    this.count = 0; // 记录栈的大小，以及帮助我们从数据结构中添加和删除元素。保证顺序

    this.items = {};
  }
  /**
   * @description 向栈中插入元素
   * @param {*} element
   * @memberof Stack
   */


  push(element) {
    this.items[this.count] = element;
    this.count++;
  }
  /**
   * @description 从栈中弹出元素
   * @returns 移出最后添加进去的元素
   * @memberof Stack
   */


  pop() {
    if (this.isEmpty()) {
      // {1}检验栈是否空
      return undefined; // 如果为空，则返回 undefined
    }

    this.count--; // 如果栈不为空的话，我们会讲 count 属性减1

    const result = this.items[this.count]; // 保存栈顶的

    delete this.items[this.count]; // 删除该属性

    return result;
  }
  /**
   * @description 返回栈的长度
   * @returns
   * @memberof Stack
   */


  size() {
    return this.count;
  }
  /**
   * @description 检查栈是否为空
   * @returns
   * @memberof Stack
   */


  isEmpty() {
    return this.count === 0;
  }
  /**
  * @description 查看栈顶元素
  * @returns 返回栈顶的元素
  * @memberof Stack
  */


  peek() {
    if (this.isEmpty()) {
      return undefined;
    }

    return this.items[this.count - 1];
  }
  /**
   * @description 清空栈元素
   * @memberof Stack
   */


  clear() {
    this.items = {};
    this.count = 0; // 或者 LIFO 原则
    // while (!this.isEmpty()) { this.pop(); }
  }
  /**
   * @description 打印栈的内容
   * @returns
   * @memberof Stack
   */


  toString() {
    if (this.isEmpty()) {
      return ''; // 如果栈是空的，我们只需返回一个空字符串
    }

    let objString = `${this.items[0]}`; // 如果不是空的，就用它底部的第一个元素作为字符串的初始值

    for (let i = 1; i < this.count; i++) {
      // 迭代整个栈的键
      objString = `${objString},${this.items[i]}`;
    }

    return objString;
  }

}

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! exports provided: StackArray, Stack, decimalToBinary, Queue, hotPotato, MinHeap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _data_structures_stack_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data-structures/stack-array */ "./src/js/data-structures/stack-array.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StackArray", function() { return _data_structures_stack_array__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _data_structures_stack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data-structures/stack */ "./src/js/data-structures/stack.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Stack", function() { return _data_structures_stack__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _data_structures_queue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data-structures/queue */ "./src/js/data-structures/queue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return _data_structures_queue__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _others_hot_potato__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./others/hot-potato */ "./src/js/others/hot-potato.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hotPotato", function() { return _others_hot_potato__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _data_structures_heap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./data-structures/heap */ "./src/js/data-structures/heap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MinHeap", function() { return _data_structures_heap__WEBPACK_IMPORTED_MODULE_4__["MinHeap"]; });

/* harmony import */ var _others_base_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./others/base-converter */ "./src/js/others/base-converter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "decimalToBinary", function() { return _others_base_converter__WEBPACK_IMPORTED_MODULE_5__["decimalToBinary"]; });

// stack








/***/ }),

/***/ "./src/js/others/base-converter.js":
/*!*****************************************!*\
  !*** ./src/js/others/base-converter.js ***!
  \*****************************************/
/*! exports provided: decimalToBinary */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decimalToBinary", function() { return decimalToBinary; });
/* harmony import */ var _data_structures_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data-structures/stack */ "./src/js/data-structures/stack.js");

/**
 * 把十进制转换成基数为 2～36 的任意进制。
 * @param {*} decNumber 十进制
 * @param {*} base 基数
 */

function decimalToBinary(decNumber, base) {
  const remStack = new _data_structures_stack__WEBPACK_IMPORTED_MODULE_0__["default"]();
  let number = decNumber; // 十进制数字

  let rem; // 余数

  let binaryString = '';

  while (number > 0) {
    // 当结果不为0，获得一个余数
    rem = Math.floor(number % base);
    remStack.push(rem); // 入栈

    number = Math.floor(number / base);
  }

  while (!remStack.isEmpty()) {
    binaryString += remStack.pop().toString();
  }

  return binaryString;
}

/***/ }),

/***/ "./src/js/others/hot-potato.js":
/*!*************************************!*\
  !*** ./src/js/others/hot-potato.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return hotPotato; });
/* harmony import */ var _data_structures_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data-structures/queue */ "./src/js/data-structures/queue.js");

/**
 * 模拟击鼓传花
 * 循环队列。在这个游戏中，孩子们围成一个圆圈，把花尽快传递给旁边的人。某一时刻传花停止，这个时候花在谁手上，谁就退出圆圈，结束游戏。
 * 重复这个过程，直到只剩一个孩子（胜者）。
 * @export
 * @param {*} elementsList 要入列的元素
 * @param {*} num // 达到给定的传递次数。 // 可以随机输入
 */

function hotPotato(elementsList, num) {
  const queue = new _data_structures_queue__WEBPACK_IMPORTED_MODULE_0__["default"]();
  const elimitatedList = [];

  for (let i = 0; i < elementsList.length; i++) {
    queue.enqueue(elementsList[i]);
  }

  while (queue.size() > 1) {
    // 循环队列，给定一个数字，然后迭代队列。从队列开头移除一项，再将其添加到队列末尾，模拟击鼓传花。
    // 一旦达到给定的传递次数，拿着花的那个人就被淘汰了。（从队列中移除）
    for (let i = 0; i < num; i++) {
      queue.enqueue(queue.dequeue());
    }

    elimitatedList.push(queue.dequeue());
  }

  return {
    elimitated: elimitatedList,
    winner: queue.dequeue()
  };
}

/***/ }),

/***/ "./src/js/util.js":
/*!************************!*\
  !*** ./src/js/util.js ***!
  \************************/
/*! exports provided: Compare, defaultCompare, swap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compare", function() { return Compare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultCompare", function() { return defaultCompare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swap", function() { return swap; });
const Compare = {
  LESS_THAN: -1,
  BIGGER_THAN: 1,
  EQUALS: 0
};
function defaultCompare(a, b) {
  if (a === b) {
    return Compare.EQUALS;
  }

  return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN;
}
/**
 * 交换函数
 * @export
 * @param {*} array
 * @param {*} a
 * @param {*} b
 */

function swap(array, a, b) {
  const temp = array[a];
  array[a] = array[b];
  array[b] = temp;
}

/***/ })

/******/ });
});
//# sourceMappingURL=PackDataStructuresAlogrithms.min.js.map